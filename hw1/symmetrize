#!/usr/bin/env python
import optparse
import sys

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Numbe of sentences to use for training and alignment")
optparser.add_option("-x", "--alignmentsEToF", dest="aETOF", default="eToF.a", help="File name for alignments from English to French (default=eToF.a)")
optparser.add_option("-y", "--alignmentsFToE", dest="aFTOE", default="fToE.a", help="File name for alignments from French to English(default=eToF.a)")
optparser.add_option("-o", "--output", dest="out", default="symmetrized.a", help="File name for output file(default=output.a)")
(opts, args) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

#create a tuple, each tuple is a tuple - one an alignment from english to french the other french to english - one tuple of the corresponding french and english sentences                                       
textAl = zip(((pair[0].strip().split(), pair[1].strip().split()) for pair in zip(open(opts.aETOF),open(opts.aFTOE))),((pair[0].strip().split(), pair[1].strip().split()) for pair in zip(open(e_data),open(f_data))[:opts.num_sents]))

temp = sys.stdout
sys.stdout = file(opts.out, 'w')

for align, sentences in textAl:
    neighboring = [(-1,0), (0,-1), (1,0), (0,1), (-1,-1), (-1,1), (1,-1), (1,1)]
    alignment = set()
    aE = set()
    aF = set()
    union = set()
    for posX in align[0]:
        for posY in align[1]:
            if posX == posY:
                alignment.add(posX)
                pair = posX.split('-')
                aF.add(pair[0])
                aE.add(pair[1])
        union.add(posX)
    i = 0
    while(i < 1):
        i+= 1
        for eWord in range(0,len(sentences[0])):
            for fWord in range(0,len(sentences[1])): 
                if (str(fWord) + "-" + str(eWord)) in alignment:
                    for enew, fnew in neighboring:
                        offset = str(fWord + fnew)+ "-" + str(eWord + enew)
                        if ((str(enew + eWord) not in aE or str(fnew + fWord) not in aF) and offset in union):
                            alignment.add(offset)
                            aE.add(eWord + enew)
                            aF.add(fWord + fnew)
                            sys.stderr.write(".")
        sys.stderr.write("\n")
    j = 0
    while (j < 1):
        j+= 1
        for eWord in range(0,len(sentences[0])):
            for fWord in range(0,len(sentences[0])):
                if (eWord not in aE or fWord not in aF) and (str(fWord) + "-" + str(eWord)) in union:
                    alignment.add(str(fWord) + '-' + str(eWord))
                    aE.add(eWord)
                    aF.add(fWord)
                    sys.stderr.write(">")
        sys.stderr.write("\n")
    #write out the alignments to the output file
    for pair in alignment: 
        sys.stdout.write("%s "% pair)
    sys.stdout.write("\n")
sys.stdout.close()
sys.stdout = temp
